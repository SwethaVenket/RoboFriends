{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","Error","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","console","log","filteredrobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cdee99b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = (props) =>\r\n{\r\n    const {name,email,id} = props;\r\n    return (\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n        <div>\r\n            <h2> {name} </h2>\r\n            <p>  {email} </p>\r\n        </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default card","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n    \r\n\r\n       return(\r\n        <div>{\r\n            robots.map((user,i) => {\r\n            return <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n            />\r\n            })\r\n        }\r\n        </div>\r\n            \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) =>{\r\n    return (\r\n        <input className= 'tc bg-lightest-blue ba pa3 b--green br4 bw1'\r\n        type = 'search'\r\n        placeholder = 'search robots..'\r\n        onChange = {searchChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n    <div style={{overflow:'scroll', border: '2px solid black',height:'800px' }}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            Error : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({Error: true});\r\n    }\r\n\r\n    render(){\r\n        \r\n        if(this.state.Error){\r\n            return <h1> OOOOOOPS this is bad</h1>\r\n        }\r\n\r\n        else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\n//import { robots } from './robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n    onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n  \r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n      \r\n    }\r\n\r\n     render(){\r\n        \r\n        const { robots, searchField , onSearchChange,isPending } = this.props;\r\n        console.log(robots);\r\n        const filteredrobots = robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n       console.log(isPending);\r\n         return (\r\n        <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={onSearchChange} />\r\n            <Scroll>\r\n                {isPending ? <h1>Loading</h1> :\r\n                <ErrorBoundary>\r\n                        <CardList robots={filteredrobots} />\r\n                </ErrorBoundary>\r\n                }\r\n            </Scroll>\r\n        </div>\r\n        );\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","//store all actions here\r\n\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    \r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots =()=> (dispatch) =>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","//store all constants here\r\n\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload});\r\n        default:\r\n            return state;   \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action = {})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: true })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport { Provider, connect } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { searchRobots } from './reducers';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({ requestRobots, searchRobots })\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n            <div className = \"tc\">\n            <Provider store={store}>\n            <App />\n            </Provider>\n            </div>\n           , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}